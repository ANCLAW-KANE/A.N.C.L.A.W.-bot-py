from vk_modules.kb_handlers.func_handler_keyboard import KeyboardRepository
from tools import Patterns, keyboard_params

class FuncMarry():
    def __init__(self,fromid):
        self.fromid = fromid

    ################################################################################################
    async def clear_marry(self):
        await self.RepoMarry.clear_all_marry_fromid()
        self.send_msg.msg = f"–¢–µ–ø–µ—Ä—å –≤—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π!"
        self.send_msg.keyboard = None
    
    async def _check_polygam_and_create(self,key):
        marry_polygam =await self.RepoMarry.get_polygam_marry()
        print(await self.RepoMarry.get_married_from_ids())
        if marry_polygam == 1 or (marry_polygam == 0 and await self.RepoMarry.get_married_from_ids() < 1):
            await self.RepoMarry.create_new_marry(self.id,self.sender, self.name)
            self.send_msg.msg = f"{self.name} ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.sender} —Å–¥–µ–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞."
            self.send_msg.keyboard = key
        else:
            self.send_msg.msg = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—Ä–∞–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
            self.send_msg.keyboard = None
         
    async def create_marry(self):
        params = await self.RepoMarry.peer_params_marry(selfid=self.id)
        key = KeyboardRepository.MarryKB(keyboard_params(user_sender= self.fromid, 
                                                         user_recipient= self.id,
                                                         conv_msg_id_old= self.conv_id+1).build())
        #print(f"married_from_ids {await self.RepoMarry.get_married_from_ids()}",f"params {params}")
        if params:
            if params['await'] == 1:
                self.send_msg.msg = f"–ë—Ä–∞–∫ —É–∂–µ –ø–æ–¥–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏!\n{self.name} –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ"
                self.send_msg.keyboard = key
            elif params['allow'] == 1: self.send_msg.msg = f"–í—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º!\n" 
        else: await self._check_polygam_and_create(key)
            
    async def unmarry(self):
        await self.RepoMarry.unmarry_fromid(self.id)
        self.send_msg.msg = f"–í—ã –æ—Ç–æ–∑–≤–∞–ª–∏ –±—Ä–∞–∫ —Å {self.name}!"
        self.send_msg.keyboard = None
    
    async def marry_query_handler(self):
        if Patterns.pattern_bool(self.string_args,[Patterns.club_pattern]) == False: 
            if '—Ö–æ–ª–æ—Å—Ç' in self.string_all: 
                await self.clear_marry()
            if self.id is not None:
                await self.create_marry()
                if '—Ä–∞–∑–≤–æ–¥' in self.string_all: await self.unmarry()
        else: self.send_msg.msg = "–ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ç—å –±—Ä–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç"
    ################################################################################################
    async def marry_list(self):
        string = None
        msgstring = ""
        if self.args_len == 1:
            strings = { 
                "–æ–∂–∏–¥–∞–Ω–∏–µ": ["–ñ–¥—É—Ç —Å–æ–≥–ª–∞—Å–∏—è üë´\n", "üíù", self.RepoMarry.awaited_marry ],
                "—è": ["–í–∞—à–∏ –±—Ä–∞–∫–∏  üë´\n", "üíù", self.RepoMarry.marry_allow]
            }
            string = strings.get(self.list_args[0], None)
        else: string = [" –ü–æ–º–æ–ª–≤–ª–µ–Ω—ã üë©‚Äç‚ù§‚Äçüë®\n", "üíû", self.RepoMarry.marry_all_allow]
        if string is not None:
            data =  await string[2]()
            if not data: msgstring = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                msgstring += f"{string[0]}"
                for z in data: msgstring += f"{string[1]} {z[0]} - {z[1]} {string[1]}\n"
        self.send_msg.msg = msgstring
################################################################################################