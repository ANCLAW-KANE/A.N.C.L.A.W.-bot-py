from CONFIG import IdGroupVK
from database_module.cabal_repo import CabalRepository
from database_module.marry_repo import MarryRepository
from tools import keyboard_params,Formatter
from sessions import api_group
from vkbottle import Keyboard, KeyboardButtonColor, Callback, ShowSnackbarEvent

class KeyboardRepository:
    def MarryKB(param):
        return Keyboard(False, True) \
            .add(Callback("–ü—Ä–∏–Ω—è—Ç—å", payload={"M_ACCEPT": param}),color=KeyboardButtonColor.POSITIVE) \
            .add(Callback("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", payload={"M_DENY": param}),color=KeyboardButtonColor.NEGATIVE).get_json()
    
    def PrivlegesKB():
        return Keyboard(False, True) \
                    .add(Callback("üî• *–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∑–ª–æ–≥–æ –±–æ–≥–∞* üî•", payload={
                    "GOD":
                        keyboard_params(pay_dir="–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∑–ª–æ–≥–æ –±–æ–≥–∞").build()}),
                         color=KeyboardButtonColor.NEGATIVE).row() \
                    .add(Callback("üî• *–≤–∞—à–∏ –≥–æ–ª–æ–≤—ã –ø–æ–¥–Ω—è—Ç—ã —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ* üî•", payload={
                    "GOD":
                        keyboard_params(pay_dir="–≤–∞—à–∏ –≥–æ–ª–æ–≤—ã –ø–æ–¥–Ω—è—Ç—ã —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ").build()}),
                         color=KeyboardButtonColor.NEGATIVE).row() \
                    .add(Callback("üî• *–∞–¥—Å–∫–∞—è –ø–æ—Ö–æ—Ç—å* üî•", payload={
                    "GOD":
                        keyboard_params(pay_dir="–∞–¥—Å–∫–∞—è –ø–æ—Ö–æ—Ç—å").build()}),
                         color=KeyboardButtonColor.NEGATIVE).get_json()

######################################################################################################################

class KeyboardEventHandler:
    def __init__(self):
        self.kb = self.reconstruct_payload
        self.RepoMarry = MarryRepository(self.peer,self.fromid)

    async def _find_msg_fix(self,list_msg,message):
        ids = list(range(self.kb['msg_old'],self.kb['msg_new']))
        if len(ids) == 0:
            await api_group.messages.edit(peer_id=self.peer, conversation_message_id=self.kb['msg_new'],
                                                  group_id=IdGroupVK, message=message)
        else:#–ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Ç–æ—á–Ω—ã–π id –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
            ids_info = await api_group.messages.get_by_conversation_message_id(peer_id=self.peer,conversation_message_ids=ids)
            for i in ids_info.items:
                if i.text in list_msg:
                    await api_group.messages.edit(peer_id=self.peer, conversation_message_id=i.conversation_message_id,
                                                  group_id=IdGroupVK, message=message)
                    

    async def marry_control(self):
        params = await self.RepoMarry.params_marry_control(self.kb['sender'])
        info = False
        if params is not None:
            if self.peer == params['peer_id']\
                and self.fromid == self.kb['recipient'] == params['man2']\
                and params['man1'] == self.kb['sender']:
                if params['allow'] == 0 and params['await_state'] == 1:
                    if self.kb['state'] == 'ACCEPT':
                        await self.RepoMarry.marry_accept(kb=self.kb['sender'])
                        message = f"{params['man1name']}  –∏  {params['man2name']} –ø–æ–∂–µ–Ω–∏–ª–∏—Å—å! –ü–æ–∑–¥—Ä–∞–≤—å—Ç–µ –º–æ–ª–æ–¥—É—é –ø–∞—Ä—É!"
                    if self.kb['state'] == 'DENY':
                        await self.RepoMarry.marry_deny(kb=self.kb['sender'])
                        message = f"{params['man2name']} ! \n {params['man1name']} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—è"
                    await self._find_msg_fix(list_msg=[
                        f"{Formatter.reformat_mention(params['man2name'])} ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"\
                            f" {Formatter.reformat_mention(params['man1name'])} —Å–¥–µ–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞.",
                        f"–ë—Ä–∞–∫ —É–∂–µ –ø–æ–¥–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏!\n"\
                            f"{Formatter.reformat_mention(params['man2name'])} –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ"],message= message)
                else: info = "–ë—Ä–∞–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω"
            else: info = "–ö—É–¥–∞ —Ç—ã –∂–º–µ—à—å -_-"
        else: info = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        if info:
            try: 
                await api_group.messages.send_message_event_answer(event_id=self.msg.event_id,
                                                                    user_id=self.msg.user_id,
                                                                    peer_id=self.msg.peer_id,
                                                                    event_data=ShowSnackbarEvent(text=info).json())
            except: await api_group.messages.send(message=info, peer_id=self.peer, random_id=0)
            
    async def privileges_control(self):
        cRepo = CabalRepository(self.peer, self.fromid)
        privilege = {
                '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∑–ª–æ–≥–æ –±–æ–≥–∞': cRepo.set_priveleges_mute,
                '–≤–∞—à–∏ –≥–æ–ª–æ–≤—ã –ø–æ–¥–Ω—è—Ç—ã —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ':cRepo.set_priveleges_head,
                '–∞–¥—Å–∫–∞—è –ø–æ—Ö–æ—Ç—å': cRepo.set_priveleges_ex,
            }
        if self.kb['dir'] in privilege:
            key = privilege.get(self.kb['dir'])
            if key: 
                msg = await key()
                await api_group.messages.send(message=msg, peer_id=self.peer, random_id=0)
######################################################################################################################